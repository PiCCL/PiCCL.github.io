import{c as o,e as r,o as i}from"./index-COv0kizz.js";const n={class:"markdown-body"},s={__name:"050Layout",setup(c,{expose:e}){return e({frontmatter:{}}),(d,t)=>(i(),o("div",n,t[0]||(t[0]=[r("<h1>Layout</h1><p>A <code>Collection</code> is a group of graphic objects generated by operations such as <code>replicate</code> or <code>repeat</code>. By setting a layout (<code>layout</code>), you can control the arrangement of graphic objects within the collection. Below are the commonly used layout methods:</p><h2>Collection.circularLayout(): this</h2><p>Arranges the graphic objects in the collection in a circular layout.</p><h3>Parameters</h3><p>None.</p><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p><h2>Collection.stackLayout(direction, gap): this</h2><p>Stacks the graphic objects in the collection in the specified direction, with an optional gap between them. The upward direction is positive.</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>direction</td><td>The stacking direction, options are <code>&quot;x&quot;</code> (horizontal) or <code>&quot;y&quot;</code> (vertical).</td></tr><tr><td>gap</td><td>The spacing between graphic objects.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p><h2>Collection.lineSnapLayout(orientation, anchor): this</h2><p>Aligns the graphic objects in the collection along the specified direction, with an optional reference line position for lineSnapment. The upward direction is positive.</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>orientation</td><td>The lineSnapment direction, options are <code>&quot;x&quot;</code> (horizontal) or <code>&quot;y&quot;</code> (vertical).</td></tr><tr><td>anchor</td><td>The reference line position for lineSnapment, ranging from <code>[0, 1]</code>. For example, <code>0</code> lineSnaps to the left/bottom, <code>0.5</code> lineSnaps to the center, and <code>1</code> lineSnaps to the right/top.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p><h2>Collection.gridLayout(direction, itemsInRow, mainGap, crossGap, mainAnchor, crossAnchor): this</h2><p>Arranges the graphic objects in the collection in a grid layout, supporting customizable row/column counts, spacing, and lineSnapment. The upward direction is positive.</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>direction</td><td>The grid arrangement direction, options are <code>&quot;lrtd&quot;</code> (left to right, top to bottom) or <code>&quot;tdlr&quot;</code> (top to bottom, left to right).</td></tr><tr><td>itemsInRow</td><td>The number of graphic objects per row.</td></tr><tr><td>mainGap</td><td>The spacing in the main direction (rows or columns).</td></tr><tr><td>crossGap</td><td>The spacing in the cross direction (columns or rows).</td></tr><tr><td>mainAnchor</td><td>The reference line position for lineSnapment in the main direction, ranging from <code>[0, 1]</code>.</td></tr><tr><td>crossAnchor</td><td>The reference line position for lineSnapment in the cross direction, ranging from <code>[0, 1]</code>.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p>",26)])))}};export{s as default};
