import{c as o,D as d,o as r}from"./index-CfrSRBHi.js";const i={class:"markdown-body"},s={__name:"010Graphic Objects",setup(c,{expose:e}){return e({frontmatter:{}}),(h,t)=>(r(),o("div",i,t[0]||(t[0]=[d(`<h1>Graphic Objects</h1><p>Graphic Objects are objects that represent graphics. Graphic Objects can:</p><ul><li>Be manually created</li><li>Be manipulated by operators to create new Graphic Objects</li><li>Set the relationship between visual channels and data fields, known as encoding</li><li>Set constraints to define the relative positions and size relationships between Graphic Objects</li><li>Set layouts to control the arrangement of multiple Graphic Objects</li><li>Add effects to achieve decorative results</li><li>Finally, Graphic Objects can be bound to data and output as images</li></ul><p>Although Glyphs and Collections are also Graphic Objects, they cannot be actively created and can only be generated by operators, so they are not covered in this section. For details on Glyphs, refer to the Constraint chapter, and for details on Collections, refer to the Layout chapter.</p><h2>class Picture</h2><p><code>Picture</code> represents an image object, inheriting from <code>GraphicObject</code>.</p><h3>constructor ({x?, y?, width?, height?, url?, opacity?, color?, colorMode?, keepRatio?})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>x?</td><td>number</td><td>The x-coordinate of the bottom-left corner of the image. Default is <code>0</code>.</td></tr><tr><td>y?</td><td>number</td><td>The y-coordinate of the bottom-left corner of the image. Default is <code>0</code>.</td></tr><tr><td>width?</td><td>number</td><td>The width of the image. Default is the original width of the image.</td></tr><tr><td>height?</td><td>number</td><td>The height of the image. Default is the original height of the image.</td></tr><tr><td>url?</td><td>string</td><td>The URL of the image.</td></tr><tr><td>opacity?</td><td>number</td><td>The opacity of the image. Default is <code>1</code>.</td></tr><tr><td>color?</td><td>string</td><td>The color to recolor the image. Default is <code>undefined</code>, meaning no recoloring.</td></tr><tr><td>colorMode?</td><td>string</td><td>The mode of recoloring the image. Default is <code>&quot;hue&quot;</code>.</td></tr></tbody></table><p>The options for <code>colorMode</code> include:</p><ul><li><code>&quot;hue&quot;</code>: Only changes the hue of the image while preserving saturation and brightness.</li><li><code>&quot;darkness&quot;</code>: Maps colors based on darkness, with darkness ranging from 0 to 1 mapping from white to the target color.</li></ul><h2>class Rect</h2><p><code>Rect</code> represents a rectangle object, inheriting from <code>GraphicObject</code>.</p><h3>constructor ({x?, y?, width?, height?, …style})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>x?</td><td>number</td><td>The x-coordinate of the bottom-left corner of the rectangle. Default is <code>0</code>.</td></tr><tr><td>y?</td><td>number</td><td>The y-coordinate of the bottom-left corner of the rectangle. Default is <code>0</code>.</td></tr><tr><td>width?</td><td>number</td><td>The width of the rectangle. Default is <code>100</code>.</td></tr><tr><td>height?</td><td>number</td><td>The height of the rectangle. Default is <code>100</code>.</td></tr><tr><td>…style</td><td>Style</td><td>The style properties of the rectangle, such as fill color, border, etc.</td></tr></tbody></table><p>Here, <code>style</code> is an object spread notation, allowing you to define specific style parameters directly in the rectangle’s constructor, for example:</p><pre><code class="language-javascript">const rect = new Rect({x = 0, y = 0, fill = &quot;red&quot;, strokeWidth = 2})
// Here, fill and strokeWidth can be set directly in the rectangle&#39;s constructor.
</code></pre><h2>class Circle</h2><p><code>Circle</code> represents a circle object, inheriting from <code>GraphicObject</code>.</p><h3>constructor ({x?, y?, r?, innerRadius?, …style})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>x?</td><td>number</td><td>The x-coordinate of the circle’s center. Default is <code>0</code>.</td></tr><tr><td>y?</td><td>number</td><td>The y-coordinate of the circle’s center. Default is <code>0</code>.</td></tr><tr><td>r?</td><td>number</td><td>The radius of the circle. Default is <code>50</code>.</td></tr><tr><td>innerRadius?</td><td>number</td><td>The inner radius of the circle (used for drawing rings). Default is <code>0</code>.</td></tr><tr><td>…style</td><td>Style</td><td>The style properties of the circle, such as fill color, border, etc.</td></tr></tbody></table><h2>class Point</h2><p><code>Point</code> represents a point object, inheriting from <code>GraphicObject</code>.</p><h3>constructor ({x?, y?, size?, shape?, …style})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>x?</td><td>number</td><td>The x-coordinate of the point. Default is <code>0</code>.</td></tr><tr><td>y?</td><td>number</td><td>The y-coordinate of the point. Default is <code>0</code>.</td></tr><tr><td>size?</td><td>number</td><td>The size of the point. Default is <code>2</code>.</td></tr><tr><td>shape?</td><td>string</td><td>The shape of the point. Default is <code>&quot;circle&quot;</code>.</td></tr><tr><td>…style</td><td>Style</td><td>The style properties of the point, such as fill color, border, etc.</td></tr></tbody></table><h2>class Line</h2><p><code>Line</code> represents a line segment object, inheriting from <code>GraphicObject</code>.</p><h3>constructor ({x1?, y1?, x2?, y2?, …style})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>x1?</td><td>number</td><td>The x-coordinate of the line’s starting point. Default is <code>0</code>.</td></tr><tr><td>y1?</td><td>number</td><td>The y-coordinate of the line’s starting point. Default is <code>0</code>.</td></tr><tr><td>x2?</td><td>number</td><td>The x-coordinate of the line’s ending point. Default is <code>100</code>.</td></tr><tr><td>y2?</td><td>number</td><td>The y-coordinate of the line’s ending point. Default is <code>100</code>.</td></tr><tr><td>…style</td><td>Style</td><td>The style properties of the line, such as color, width, etc.</td></tr></tbody></table><h2>class Text</h2><p><code>Text</code> represents a text object, inheriting from <code>GraphicObject</code>.</p><h3>constructor ({x?, y?, content?, …style})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>x?</td><td>number</td><td>The x-coordinate of the bottom-left corner of the text. Default is <code>0</code>.</td></tr><tr><td>y?</td><td>number</td><td>The y-coordinate of the bottom-left corner of the text. Default is <code>0</code>.</td></tr><tr><td>content?</td><td>string</td><td>The content of the text. Default is an empty string <code>&quot;&quot;</code>.</td></tr><tr><td>…style</td><td>TextStyle</td><td>The style properties of the text, such as font, color, etc.</td></tr></tbody></table><h2>class Axis</h2><p><code>Axis</code> represents an axis object, inheriting from <code>GraphicObject</code>.</p><h3>constructor (orientation, {tickPosition?, tickLength?, labelOffset?, fontSize?, position?, color?, showBaseline?, showTickLine?, showTickLabel?, numberTicks?, scale?})</h3><table><thead><tr><th>parameter</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>orientation</td><td>string</td><td>The orientation of the axis, with options being <code>&quot;x&quot;</code>, <code>&quot;y&quot;</code>, <code>&quot;-x&quot;</code>, <code>&quot;-y&quot;</code>.</td></tr><tr><td>tickPosition?</td><td>string</td><td>The position of the tick marks, with options being <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;bottom&quot;</code>. Default is <code>&quot;left&quot;</code>.</td></tr><tr><td>tickLength?</td><td>number</td><td>The length of the tick marks. Default is <code>5</code>.</td></tr><tr><td>labelOffset?</td><td>number</td><td>The offset between the tick labels and the tick marks. Default is <code>10</code>.</td></tr><tr><td>fontSize?</td><td>number</td><td>The font size of the tick labels. Default is <code>16</code>.</td></tr><tr><td>position?</td><td>number</td><td>The position of the axis. Default is <code>0</code>.</td></tr><tr><td>color?</td><td>string</td><td>The color of the axis. Default is <code>&quot;#000&quot;</code>.</td></tr><tr><td>showBaseline?</td><td>boolean</td><td>Whether to show the baseline. Default is <code>true</code>.</td></tr><tr><td>showTickLine?</td><td>boolean</td><td>Whether to show the tick marks. Default is <code>true</code>.</td></tr><tr><td>showTickLabel?</td><td>boolean</td><td>Whether to show the tick labels. Default is <code>true</code>.</td></tr><tr><td>numberTicks?</td><td>number</td><td>The number of tick marks. Default is <code>5</code>.</td></tr><tr><td>scale?</td><td>Scale</td><td>The scale corresponding to the axis.</td></tr></tbody></table><h3>Orientation Parameter Explanation</h3><ul><li><code>orientation</code> is used to specify the direction of the axis: <ul><li><code>&quot;x&quot;</code>: Horizontal axis, from left to right.</li><li><code>&quot;y&quot;</code>: Vertical axis, from bottom to top.</li><li><code>&quot;-x&quot;</code>: Reverse horizontal axis, from right to left.</li><li><code>&quot;-y&quot;</code>: Reverse vertical axis, from top to bottom.</li></ul></li></ul><hr><h3>TickPosition Parameter Explanation</h3><ul><li><code>tickPosition</code> is used to specify the position of the tick marks: <ul><li>For horizontal axes (<code>&quot;x&quot;</code> or <code>&quot;-x&quot;</code>), the options are <code>&quot;top&quot;</code> or <code>&quot;bottom&quot;</code>.</li><li>For vertical axes (<code>&quot;y&quot;</code> or <code>&quot;-y&quot;</code>), the options are <code>&quot;left&quot;</code> or <code>&quot;right&quot;</code>.</li></ul></li></ul>`,41)])))}};export{s as default};
