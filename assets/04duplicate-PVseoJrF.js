import{c as a,e as o,o as c}from"./index-DUqe66oj.js";const i="/examples/images/cash.png",n={class:"markdown-body"},r={__name:"04duplicate",setup(s,{expose:t}){return t({frontmatter:{}}),(l,e)=>(c(),a("div",n,e[0]||(e[0]=[o(`<h1>Learn to Use Duplicate</h1><p>In this tutorial, we will create a chart based on stacked cash images. The unique feature of this chart is that each bar consists of multiple stacked cash images, with the number of stacks determined by the data. Additionally, each bar displays a corresponding numerical label at the top. We will break down the code step by step and explain the purpose of each step.</p><h2>1. Prepare Data</h2><p>First, we define a set of data representing values for different categories:</p><pre><code class="language-typescript">const data = [
  { category: &#39;A&#39;, amount: 17 },
  { category: &#39;B&#39;, amount: 14 },
  { category: &#39;C&#39;, amount: 14 },
  { category: &#39;D&#39;, amount: 13 },
  { category: &#39;E&#39;, amount: 15 },
  { category: &#39;F&#39;, amount: 16 },
]
</code></pre><ul><li><code>category</code>: Represents the category.</li><li><code>amount</code>: Represents the value, which will determine the number of stacked cash images.</li></ul><h2>2. Create Cash Image</h2><p>Next, we create a cash image object <code>cash</code> and set its width and height.</p><pre><code class="language-typescript">const cash = new Picture({ url: &#39;examples/cash/cash.png&#39;, width: 100, height: 100 })
</code></pre><ul><li><code>cash</code>: The cash image, with both width and height set to <code>100</code>.</li></ul><h2>3. Stack Cash Images</h2><p>Use the <code>repeat</code> operator to replicate the cash image multiple times, with the number of stacks determined by the <code>amount</code> field in the data.</p><pre><code class="language-typescript">const cashStack = repeat(cash, &#39;amount&#39;)
  .stackLayout(&#39;y&#39;, -70) // Stack along the y-axis with a spacing of -70
  .encode(&#39;x&#39;, &#39;category&#39;) // Bind the x-coordinate to the category field in the data
</code></pre><ul><li><code>repeat</code>: Repeats the cash image based on the <code>amount</code> field in the data.</li><li><code>stackLayout</code>: Stacks the cash images along the y-axis with a spacing of <code>-70</code> (negative value indicates upward stacking).</li><li><code>encode</code>: Binds the x-coordinate of the stacked cash images to the <code>category</code> field in the data.</li></ul><h2>4. Create Numerical Labels</h2><p>We create a text object <code>label</code> to display the numerical value at the top of each bar.</p><pre><code class="language-typescript">const label = new Text({ fontSize: 30, textAnchor: &#39;middle&#39;, fontWeight: &#39;bold&#39; }).encode(
  &#39;content&#39;,
  &#39;amount&#39;,
) // Bind the text content to the amount field in the data
</code></pre><ul><li><code>label</code>: A text object with a font size of <code>30</code>, center-lineSnaped, and bold.</li><li><code>encode</code>: Binds the text content to the <code>amount</code> field in the data.</li></ul><h2>5. Combine Cash Stack and Label</h2><p>We combine the cash stack <code>cashStack</code> and the label <code>label</code> into a single entity and set constraints between them.</p><pre><code class="language-typescript">const glyph = union([cashStack, label]).pointSnap(label, cashStack, { anchor: [0.5, 1] }) // Connect the label to the top center of the cash stack
</code></pre><ul><li><code>union</code>: Combines the cash stack and label into a single entity.</li><li><code>pointSnap</code>: Connects the label to the top center of the cash stack.</li></ul><h2>6. Repeat the Graphic</h2><p>Use the <code>replicate</code> operator to replicate the combined graphic <code>glyph</code> multiple times, with each graphic corresponding to a data point.</p><pre><code class="language-typescript">const collection = replicate(glyph)
</code></pre><ul><li><code>replicate</code>: Generates multiple graphics based on the number of data points.</li></ul><h2>7. Create x-Axis</h2><p>We create an x-axis to display the categories.</p><pre><code class="language-typescript">const xAxis = new Axis(&#39;x&#39;, { showTickLine: false }) // Do not display tick lines
</code></pre><ul><li><code>xAxis</code>: The x-axis, representing categories, without tick lines.</li></ul><h2>8. Combine Graphics and Render</h2><p>Finally, we combine the graphics and the x-axis into a single entity and use the <code>show</code> function to render it on the page.</p><pre><code class="language-typescript">const chart = union([collection, xAxis])

show([[chart, data]], document.body, {})
</code></pre><ul><li><code>union</code>: Combines the graphics and x-axis into a single entity.</li><li><code>show</code>: Renders the graphic into <code>document.body</code>.</li></ul><h2>9. Final Result</h2><p>After running the above code, you will see a chart based on stacked cash images:</p><p><img src="`+i+'" alt=""></p><ul><li>Each bar consists of multiple stacked cash images, with the number of stacks determined by the <code>amount</code> field in the data.</li><li>Each bar displays a corresponding numerical label at the top.</li><li>The x-axis displays the categories.</li></ul>',38)])))}};export{r as default};
