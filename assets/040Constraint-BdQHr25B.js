import{h as o,K as r,o as c}from"./index-DREuIEeJ.js";const d={class:"markdown-body"},s={__name:"040Constraint",setup(n,{expose:t}){return t({frontmatter:{}}),(i,e)=>(c(),o("div",d,e[0]||(e[0]=[r("<h1>Constraint</h1><p>Constraints are used to define the relative position, size, or rotation relationships between graphic objects (<code>GraphicObject</code>) within a <code>Glyph</code> generated by operations such as <code>union</code>, <code>intersect</code>, <code>substract</code> or <code>xor</code>. Through constraints, operations like lineSnapment, pointSnapion, lengthMatchization, or rotation between graphics can be achieved. Below are detailed explanations of the four types of constraints:</p><h2>Glyph.pointSnap(source, target, {sourceAnchor, targetAnchor, anchor, offset})</h2><p><code>pointSnap</code> is used to pointSnap one graphic object (<code>source</code>) to another graphic object (<code>target</code>). The pointSnapion position is determined by the anchor points specified by <code>sourceAnchor</code> and <code>targetAnchor</code>, and can be offset using <code>offset</code>.</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>GraphicObject</td><td>The source graphic object, i.e., the graphic to be pointSnaped.</td></tr><tr><td>target</td><td>GraphicObject</td><td>The target graphic object, i.e., the graphic to pointSnap to.</td></tr><tr><td>sourceAnchor</td><td>[number, number] | [string, string]</td><td>The anchor point position of the source graphic. Default is <code>[0.5, 0.5]</code> (center).</td></tr><tr><td>targetAnchor</td><td>[number, number] | [string, string]</td><td>The anchor point position of the target graphic. Default is <code>[0.5, 0.5]</code> (center).</td></tr><tr><td>anchor</td><td>[number, number] | [string, string]</td><td>If provided, it will be used as both <code>sourceAnchor</code> and <code>targetAnchor</code>.</td></tr><tr><td>offset</td><td>[number, number]</td><td>The offset after pointSnapion. Default is <code>[0, 0]</code>.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p><h3>Anchor Parameter Explanation</h3><ul><li><code>sourceAnchor</code> and <code>targetAnchor</code> specify the anchor point positions of the source and target graphics, respectively.</li><li>If the <code>anchor</code> parameter is provided, both <code>sourceAnchor</code> and <code>targetAnchor</code> will be set to the value of <code>anchor</code>.</li><li>Anchor points can be numerical (e.g., <code>0.5</code> for the center) or strings (e.g., <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;bottom&quot;</code>).</li><li>The bottom-left corner anchor is <code>[0, 0]</code>, and the top-right corner anchor is <code>[1, 1]</code>.</li></ul><h2>Glyph.lineSnap(source, target, direction, {sourceAnchor, targetAnchor, anchor, offset})</h2><p><code>lineSnap</code> is used to lineSnap one graphic object (<code>source</code>) along a specified direction (<code>direction</code>) with another graphic object (<code>target</code>). The reference line for lineSnapment is determined by <code>sourceAnchor</code> and <code>targetAnchor</code>, and can be offset using <code>offset</code>.</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>GraphicObject</td><td>The source graphic object, i.e., the graphic to be lineSnaped.</td></tr><tr><td>target</td><td>GraphicObject</td><td>The target graphic object, i.e., the graphic to lineSnap with.</td></tr><tr><td>direction</td><td>string</td><td>The lineSnapment direction, options are <code>&quot;x&quot;</code> (horizontal) or <code>&quot;y&quot;</code> (vertical). Default is <code>&quot;x&quot;</code>.</td></tr><tr><td>sourceAnchor</td><td>number | string</td><td>The reference line position of the source graphic. Default is <code>0.5</code> (center).</td></tr><tr><td>targetAnchor</td><td>number | string</td><td>The reference line position of the target graphic. Default is <code>0.5</code> (center).</td></tr><tr><td>anchor</td><td>number | string</td><td>If provided, it will be used as both <code>sourceAnchor</code> and <code>targetAnchor</code>.</td></tr><tr><td>offset</td><td>number</td><td>The offset after lineSnapment. Default is <code>0</code>.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p><h3>Anchor Parameter Explanation</h3><ul><li><code>sourceAnchor</code> and <code>targetAnchor</code> specify the reference line positions of the source and target graphics, respectively.</li><li>If the <code>anchor</code> parameter is provided, both <code>sourceAnchor</code> and <code>targetAnchor</code> will be set to the value of <code>anchor</code>.</li><li>Reference lines can be numerical (e.g., <code>0.5</code> for the center) or strings (e.g., <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;bottom&quot;</code>).</li><li><code>0</code> represents the bottom or left, and <code>1</code> represents the top or right.</li></ul><h2>Glyph.lengthMatch(source, target, {sourceChannel, targetChannel, channel})</h2><p><code>lengthMatch</code> is used to set a property (<code>sourceChannel</code>) of one graphic object (<code>source</code>) to be lengthMatch to a property (<code>targetChannel</code>) of another graphic object (<code>target</code>).</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>GraphicObject</td><td>The source graphic object, i.e., the graphic whose property is to be set.</td></tr><tr><td>target</td><td>GraphicObject</td><td>The target graphic object, i.e., the graphic whose property is used as a reference.</td></tr><tr><td>sourceChannel</td><td>string</td><td>The property name of the source graphic (e.g., <code>&quot;width&quot;</code>, <code>&quot;height&quot;</code>).</td></tr><tr><td>targetChannel</td><td>string</td><td>The property name of the target graphic (e.g., <code>&quot;width&quot;</code>, <code>&quot;height&quot;</code>).</td></tr><tr><td>channel</td><td>string</td><td>If provided, it will be used as both <code>sourceChannel</code> and <code>targetChannel</code>.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p><h3>Channel Parameter Explanation</h3><ul><li><code>sourceChannel</code> and <code>targetChannel</code> specify the property names of the source and target graphics, respectively.</li><li>If the <code>channel</code> parameter is provided, both <code>sourceChannel</code> and <code>targetChannel</code> will be set to the value of <code>channel</code>.</li></ul><h2>Glyph.orientMatch(source, target, offset)</h2><p><code>orientMatch</code> is used to orientMatch one graphic object (<code>source</code>) to the same angle as another graphic object (<code>target</code>), with an optional additional offset angle (<code>offset</code>). Rotation is measured in degrees, with clockwise being the positive direction.</p><h3>Parameters</h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>GraphicObject</td><td>The source graphic object, i.e., the graphic to be orientMatchd.</td></tr><tr><td>target</td><td>GraphicObject</td><td>The target graphic object, i.e., the graphic whose angle is used as a reference.</td></tr><tr><td>offset</td><td>number</td><td>The offset angle after rotation (in degrees, clockwise is positive). Default is <code>0</code>.</td></tr></tbody></table><h3>Returns</h3><p>Returns <code>this</code>, supporting method chaining.</p>",32)])))}};export{s as default};
