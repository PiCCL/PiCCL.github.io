import{h as o,K as n,o as i}from"./index-dP71Cw39.js";const a="/assets/pencil_imgs-D25W6cC-.png",c="/examples/images/pencil.png",d={class:"markdown-body"},r={__name:"02Union And Constraint",setup(p,{expose:t}){return t({frontmatter:{}}),(h,e)=>(i(),o("div",d,e[0]||(e[0]=[n('<h1>Learn to Use Union and Constraint</h1><p>In this tutorial, we will create a bar chart based on pencil images. The unique feature of this bar chart is that each bar consists of three parts: the top, middle, and bottom of the pencil. We will break down the code step by step and explain the purpose of each step.</p><p><img src="'+a+`" alt=""></p><h2>1. Prepare Data</h2><p>First, we define a set of data representing values for different categories:</p><pre><code class="language-typescript">const data = [
  { category: &#39;A&#39;, amount: 70 },
  { category: &#39;B&#39;, amount: 40 },
  { category: &#39;C&#39;, amount: 40 },
  { category: &#39;D&#39;, amount: 30 },
  { category: &#39;E&#39;, amount: 50 },
  { category: &#39;F&#39;, amount: 60 },
]
</code></pre><ul><li><code>category</code>: Represents the category.</li><li><code>amount</code>: Represents the value, which will determine the height of the pencil.</li></ul><h2>2. Create Parts of the Pencil</h2><p>Next, we create the three parts of the pencil: the top, middle, and bottom. Each part is a <code>Picture</code> object representing an image.</p><p>Why do we split the pencil into three parts Because we want the length of the pencil to encode the data, but if we stretch the pencil as a whole, the tip and bottom angles will distort, resulting in a poor visual effect. Therefore, we separate the top and bottom of the pencil and only stretch the middle rectangular part, avoiding any distortion.</p><p>Considering that we still use the entire pencil’s length to represent the data, rather than just the height of the middle rectangle, we can set it up as follows: lineSnap the bottom of the pencil’s bottom image to the 0 position, and lineSnap the top of the pencil’s top image to the position indicated by the data. The middle part is constrained to lineSnap its top and bottom with the corresponding parts. This ensures both the correct encoding of data and the integrity of the entire pencil graphic.</p><pre><code class="language-typescript">const pencilTop = new Picture({ url: &#39;examples/pencil/top.png&#39;, y: 600 }).encode(&#39;y&#39;, &#39;amount&#39;, {
  anchor: 1,
})

const pencilMiddle = new Picture({ url: &#39;examples/pencil/middle.png&#39; })

const pencilBottom = new Picture({ url: &#39;examples/pencil/bottom.png&#39;, width: 100 })
</code></pre><ul><li><code>pencilTop</code>: The top part of the pencil. We bind the <code>y</code> coordinate to the <code>amount</code> field in the data using the <code>encode</code> method, with <code>anchor: 1</code> indicating the anchor point is at the top.</li><li><code>pencilMiddle</code>: The middle part of the pencil.</li><li><code>pencilBottom</code>: The bottom part of the pencil, with a fixed width of <code>100</code>.</li></ul><h2>3. Combine Parts of the Pencil</h2><p>We combine the top, middle, and bottom parts of the pencil into a complete pencil graphic and set constraints between them.</p><pre><code class="language-typescript">const pencil = union([pencilTop, pencilMiddle, pencilBottom])
  .lengthMatch(pencilTop, pencilBottom, { channel: &#39;width&#39; }) // Ensure the top and bottom have the same width
  .lengthMatch(pencilMiddle, pencilBottom, { channel: &#39;width&#39; }) // Ensure the middle and bottom have the same width
  .lineSnap(pencilMiddle, pencilTop, &#39;y&#39;, { sourceAnchor: &#39;top&#39;, targetAnchor: &#39;bottom&#39; }) // Align the top of the middle part with the bottom of the top part
  .lineSnap(pencilMiddle, pencilBottom, &#39;y&#39;, { sourceAnchor: &#39;bottom&#39;, targetAnchor: &#39;top&#39; }) // Align the bottom of the middle part with the top of the bottom part
  .encode(&#39;x&#39;, &#39;category&#39;) // Bind the x-coordinate to the category field in the data
</code></pre><ul><li><code>union</code>: Combines the three parts of the pencil into a single entity.</li><li><code>lengthMatch</code>: Ensures the top, middle, and bottom parts have the same width.</li><li><code>lineSnap</code>: Sets the lineSnapment between the middle part and the top and bottom parts.</li><li><code>encode</code>: Binds the <code>x</code> coordinate of the pencil to the <code>category</code> field in the data.</li></ul><h2>4. Repeat the Pencil Graphic</h2><p>Use the <code>replicate</code> operator to replicate the pencil graphic multiple times, with each pencil corresponding to a data point.</p><pre><code class="language-typescript">const collection = replicate(pencil)
</code></pre><ul><li><code>replicate</code>: Generates multiple pencil graphics based on the number of data points.</li></ul><h2>5. Create Axes</h2><p>We create x and y axes to display the categories and values.</p><pre><code class="language-typescript">const xAxis = new Axis(&#39;x&#39;, { position: -10 })
const yAxis = new Axis(&#39;y&#39;, { position: -100 })
</code></pre><ul><li><code>xAxis</code>: The x-axis, representing categories.</li><li><code>yAxis</code>: The y-axis, representing values.</li></ul><h2>6. Combine Graphics and Render</h2><p>Finally, we combine the pencil graphics and axes into a single entity and use the <code>show</code> function to render it on the page.</p><pre><code class="language-typescript">const chart = union([collection, xAxis, yAxis])

show([
  [chart, data]
], document.body, {})
</code></pre><ul><li><code>union</code>: Combines the pencil graphics and axes into a single entity.</li><li><code>show</code>: Renders the graphic into <code>document.body</code>.</li></ul><p>In the <code>show</code> function, we complete the binding of the <code>graphicObject</code> and <code>data</code>. We pass a tuple <code>[chart, data]</code>, meaning that the <code>data</code> scope of the <code>chart</code> graphicObject is the provided data.</p><h2>7. Final Result</h2><p>After running the above code, you will see a bar chart based on pencil images:</p><p><img src="`+c+'" alt=""></p><ul><li>Each bar consists of the top, middle, and bottom parts of the pencil.</li><li>The height of the bars is determined by the <code>amount</code> field in the data.</li><li>The x-axis displays categories, and the y-axis displays values.</li></ul>',34)])))}};export{r as default};
