import{h as a,K as n,o}from"./index-DREuIEeJ.js";const c="/assets/human_imgs-CP8nwsy9.png",r="/examples/images/human.png",h={class:"markdown-body"},p={__name:"03Intersect",setup(i,{expose:t}){return t({frontmatter:{}}),(l,e)=>(o(),a("div",h,e[0]||(e[0]=[n('<h1>Learn to Use Intersect</h1><p>In this tutorial, we will create a bar chart with a human body shape. The unique feature of this chart is that each bar consists of a human body shape and a water level rectangle, where the height of the water level is determined by the data. We will break down the code step by step and explain the purpose of each step.</p><p><img src="'+c+`" alt=""></p><h2>1. Prepare Data</h2><p>First, we define a set of data representing values for different categories:</p><pre><code class="language-typescript">const data = [
  { category: &#39;A&#39;, amount: 70 },
  { category: &#39;B&#39;, amount: 40 },
  { category: &#39;C&#39;, amount: 40 },
  { category: &#39;D&#39;, amount: 30 },
  { category: &#39;E&#39;, amount: 50 },
  { category: &#39;F&#39;, amount: 60 },
]
</code></pre><ul><li><code>category</code>: Represents the category.</li><li><code>amount</code>: Represents the value, which will determine the height of the water level.</li></ul><h2>2. Create Human Shape and Water Level Rectangle</h2><p>Next, we create the human shape and the water level rectangle. The human shape consists of two images: <code>shape</code> and <code>border</code>, while the water level is represented by a <code>Rect</code> object.</p><pre><code class="language-typescript">const shape = new Picture({ url: &#39;examples/human/human_shape.png&#39; })
const border = new Picture({ url: &#39;examples/human/human_border.png&#39; })
const water = new Rect({ fill: &#39;skyblue&#39;, height: 450 }).encode(&#39;height&#39;, &#39;amount&#39;)
</code></pre><ul><li><code>shape</code>: The image of the human shape.</li><li><code>border</code>: The image of the human border.</li><li><code>water</code>: The water level rectangle, filled with <code>skyblue</code> and an initial height of <code>450</code>. The height is bound to the <code>amount</code> field in the data using the <code>encode</code> method.</li></ul><h2>3. Combine Water Level Rectangle and Human Shape</h2><p>We perform an intersection operation between the water level rectangle and the human shape and set constraints between them.</p><pre><code class="language-typescript">const g1 = intersect(water, shape)
  .lineSnap(water, shape, &#39;x&#39;) // Align the water level rectangle and the human shape in the x-direction
  .lengthMatch(water, shape, { channel: &#39;width&#39; }) // Ensure the water level rectangle and the human shape have the same width
</code></pre><ul><li><code>intersect</code>: Performs an intersection operation between the water level rectangle and the human shape, generating a new graphic object <code>g1</code>.</li><li><code>lineSnap</code>: Aligns the water level rectangle and the human shape in the x-direction.</li><li><code>lengthMatch</code>: Ensures the water level rectangle and the human shape have the same width.</li></ul><h2>4. Combine Graphics and Add Border</h2><p>We combine the intersected graphic <code>g1</code> with the human border <code>border</code> and set constraints between them.</p><pre><code class="language-typescript">const g2 = union([g1, border])
  .lineSnap(border, g1, &#39;x&#39;) // Align the border with \`g1\` in the x-direction
  .encode(&#39;x&#39;, &#39;category&#39;) // Bind the x-coordinate to the category field in the data
</code></pre><ul><li><code>union</code>: Combines <code>g1</code> and <code>border</code> into a single entity.</li><li><code>lineSnap</code>: Aligns the border with <code>g1</code> in the x-direction.</li><li><code>encode</code>: Binds the x-coordinate of the graphic to the <code>category</code> field in the data.</li></ul><h2>5. Repeat the Graphic</h2><p>Use the <code>replicate</code> operator to replicate the graphic <code>g2</code> multiple times, with each graphic corresponding to a data point.</p><pre><code class="language-typescript">const collection = replicate(g2)
</code></pre><ul><li><code>replicate</code>: Generates multiple graphics based on the number of data points.</li></ul><h2>6. Render the Graphic</h2><p>Finally, we use the <code>show</code> function to render the graphic on the page.</p><pre><code class="language-typescript">show([[collection, data]], document.body, {})
</code></pre><ul><li><code>show</code>: Renders the graphic into <code>document.body</code>.</li></ul><h2>7. Final Result</h2><p>After running the above code, you will see a bar chart with a human body shape:</p><p><img src="`+r+'" alt=""></p><ul><li>Each bar consists of a human shape and a water level rectangle.</li><li>The height of the water level is determined by the <code>amount</code> field in the data.</li><li>The human border enhances the visual effect.</li></ul>',31)])))}};export{p as default};
